"""autogen: model changes

Revision ID: a65c8b32f3b0
Revises: 1d16ea53d160
Create Date: 2025-09-11 15:44:00.762029

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a65c8b32f3b0'
down_revision: Union[str, Sequence[str], None] = '1d16ea53d160'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Temporarily disable compression and decompress chunks to allow schema changes on hypertable
    op.execute("DO $$ BEGIN PERFORM remove_compression_policy('measurements'); EXCEPTION WHEN OTHERS THEN NULL; END $$;")
    op.execute("ALTER TABLE measurements SET (timescaledb.compress = false);")
    op.execute(
        """
        DO $$
        DECLARE r record;
        BEGIN
          FOR r IN (
            SELECT format('%I.%I', chunk_schema, chunk_name) AS chunk
            FROM timescaledb_information.chunks
            WHERE hypertable_name = 'measurements'
          ) LOOP
            BEGIN
              EXECUTE format('SELECT decompress_chunk(%L);', r.chunk);
            EXCEPTION WHEN OTHERS THEN NULL;
            END;
          END LOOP;
        END $$;
        """
    )
    op.alter_column('device_state', 'agent_version',
               existing_type=sa.TEXT(),
               type_=sa.String(length=32),
               existing_nullable=True)
    op.alter_column('devices', 'model',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.create_index('ix_devices_site', 'devices', ['site_id'], unique=False)
    op.add_column('measurements', sa.Column('status_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('measurements', sa.Column('event_state', sa.Integer(), nullable=True))
    op.add_column('measurements', sa.Column('reliability', sa.Integer(), nullable=True))
    op.add_column('measurements', sa.Column('priority_array', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('measurements', sa.Column('source_timestamp', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('measurements', 'point_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('measurements', 'unit',
               existing_type=sa.TEXT(),
               type_=sa.String(length=64),
               existing_nullable=True)
    op.execute("DROP INDEX IF EXISTS measurements_measurement_timestamp_idx;")
    op.create_index('ix_measurements_point_time', 'measurements', ['point_id', sa.literal_column('measurement_timestamp DESC')], unique=False)
    op.create_index('ix_measurements_time', 'measurements', [sa.literal_column('measurement_timestamp DESC')], unique=False)
    op.create_unique_constraint('uq_point_measurement_time', 'measurements', ['point_id', 'measurement_timestamp'])
    op.alter_column('point_metadata_history', 'unit',
               existing_type=sa.TEXT(),
               type_=sa.String(length=64),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_point_meta_version'), 'point_metadata_history', type_='unique')
    op.add_column('points', sa.Column('name', sa.String(length=255), nullable=False))
    op.add_column('points', sa.Column('object_type', sa.String(length=255), nullable=False))
    op.add_column('points', sa.Column('object_instance', sa.Integer(), nullable=False))
    op.add_column('points', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('points', sa.Column('cov_increment', sa.Numeric(precision=14, scale=6), nullable=True))
    op.alter_column('points', 'unit',
               existing_type=sa.TEXT(),
               type_=sa.String(length=64),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_points_site_name'), 'points', type_='unique')
    op.create_index('ix_points_site', 'points', ['site_id'], unique=False)
    op.create_index('ix_points_site_type_instance', 'points', ['site_id', 'object_type', 'object_instance'], unique=False)
    op.create_unique_constraint('uq_points_site_type_instance', 'points', ['site_id', 'object_type', 'object_instance'])
    op.drop_column('points', 'point_name')
    op.alter_column('sites', 'display_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=64),
               existing_nullable=False)
    op.create_unique_constraint(None, 'sites', ['display_name'])
    op.drop_column('sites', 'tz')
    # Re-enable compression settings and restore policies
    op.execute(
        """
        ALTER TABLE measurements SET (
          timescaledb.compress = true,
          timescaledb.compress_orderby = 'measurement_timestamp DESC',
          timescaledb.compress_segmentby = 'point_id'
        );
        """
    )
    op.execute("SELECT add_compression_policy('measurements', INTERVAL '7 days', if_not_exists => TRUE);")
    op.execute("SELECT add_retention_policy('measurements', INTERVAL '365 days', if_not_exists => TRUE);")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('sites', sa.Column('tz', sa.TEXT(), server_default=sa.text("'UTC'::text"), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'sites', type_='unique')
    op.alter_column('sites', 'display_name',
               existing_type=sa.String(length=64),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('points', sa.Column('point_name', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint('uq_points_site_type_instance', 'points', type_='unique')
    op.drop_index('ix_points_site_type_instance', table_name='points')
    op.drop_index('ix_points_site', table_name='points')
    op.create_unique_constraint(op.f('uq_points_site_name'), 'points', ['site_id', 'point_name'], postgresql_nulls_not_distinct=False)
    op.alter_column('points', 'unit',
               existing_type=sa.String(length=64),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('points', 'cov_increment')
    op.drop_column('points', 'description')
    op.drop_column('points', 'object_instance')
    op.drop_column('points', 'object_type')
    op.drop_column('points', 'name')
    op.create_unique_constraint(op.f('uq_point_meta_version'), 'point_metadata_history', ['point_id', 'effective_from'], postgresql_nulls_not_distinct=False)
    op.alter_column('point_metadata_history', 'unit',
               existing_type=sa.String(length=64),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint('uq_point_measurement_time', 'measurements', type_='unique')
    op.drop_index('ix_measurements_time', table_name='measurements')
    op.drop_index('ix_measurements_point_time', table_name='measurements')
    op.create_index(op.f('measurements_measurement_timestamp_idx'), 'measurements', [sa.literal_column('measurement_timestamp DESC')], unique=False)
    op.alter_column('measurements', 'unit',
               existing_type=sa.String(length=64),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('measurements', 'point_name',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('measurements', 'source_timestamp')
    op.drop_column('measurements', 'priority_array')
    op.drop_column('measurements', 'reliability')
    op.drop_column('measurements', 'event_state')
    op.drop_column('measurements', 'status_flags')
    op.drop_index('ix_devices_site', table_name='devices')
    op.alter_column('devices', 'model',
               existing_type=sa.String(length=255),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('device_state', 'agent_version',
               existing_type=sa.String(length=32),
               type_=sa.TEXT(),
               existing_nullable=True)
    # ### end Alembic commands ###
